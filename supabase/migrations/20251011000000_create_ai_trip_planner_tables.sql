/*
  # AI Trip Planner System

  Creates tables and policies for the AI-powered trip planning feature with chat interface.

  ## Tables Created

  ### 1. ai_trip_plans
  Stores complete trip itineraries generated by AI
  - `id` (uuid, primary key) - Unique identifier
  - `user_id` (uuid, foreign key) - References auth.users
  - `trip_plan_id` (text) - Application-level trip plan ID
  - `destination` (text) - Destination name
  - `start_date` (timestamptz) - Trip start date
  - `end_date` (timestamptz) - Trip end date
  - `budget` (numeric) - Total budget for the trip
  - `travelers` (integer) - Number of travelers
  - `itinerary` (jsonb) - Complete daily itinerary with activities
  - `total_cost` (numeric) - Calculated total cost
  - `suggestions` (jsonb) - AI-generated travel suggestions
  - `created_at` (timestamptz) - Record creation timestamp
  - `updated_at` (timestamptz) - Last update timestamp

  ### 2. ai_chat_messages
  Stores chat conversation history between users and AI
  - `id` (uuid, primary key) - Unique identifier
  - `user_id` (uuid, foreign key) - References auth.users
  - `message_id` (text) - Application-level message ID
  - `role` (text) - Message role: 'user' or 'assistant'
  - `content` (text) - Message content
  - `trip_plan_id` (text, nullable) - Associated trip plan if any
  - `created_at` (timestamptz) - Message timestamp

  ## Security
  - Row Level Security (RLS) enabled on all tables
  - Users can only access their own trip plans and chat messages
  - Policies for SELECT, INSERT, UPDATE, and DELETE operations

  ## Indexes
  - Fast lookups by user_id and trip_plan_id
  - Optimized for chat message retrieval in chronological order
*/

-- Create ai_trip_plans table
CREATE TABLE IF NOT EXISTS ai_trip_plans (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  trip_plan_id text NOT NULL,
  destination text NOT NULL,
  start_date timestamptz NOT NULL,
  end_date timestamptz NOT NULL,
  budget numeric NOT NULL DEFAULT 0,
  travelers integer NOT NULL DEFAULT 1,
  itinerary jsonb NOT NULL DEFAULT '[]'::jsonb,
  total_cost numeric NOT NULL DEFAULT 0,
  suggestions jsonb DEFAULT '[]'::jsonb,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create ai_chat_messages table
CREATE TABLE IF NOT EXISTS ai_chat_messages (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  message_id text NOT NULL,
  role text NOT NULL CHECK (role IN ('user', 'assistant')),
  content text NOT NULL,
  trip_plan_id text,
  created_at timestamptz DEFAULT now()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_ai_trip_plans_user_id ON ai_trip_plans(user_id);
CREATE INDEX IF NOT EXISTS idx_ai_trip_plans_trip_plan_id ON ai_trip_plans(trip_plan_id);
CREATE INDEX IF NOT EXISTS idx_ai_trip_plans_created_at ON ai_trip_plans(created_at DESC);

CREATE INDEX IF NOT EXISTS idx_ai_chat_messages_user_id ON ai_chat_messages(user_id);
CREATE INDEX IF NOT EXISTS idx_ai_chat_messages_created_at ON ai_chat_messages(created_at);
CREATE INDEX IF NOT EXISTS idx_ai_chat_messages_trip_plan_id ON ai_chat_messages(trip_plan_id) WHERE trip_plan_id IS NOT NULL;

-- Enable Row Level Security
ALTER TABLE ai_trip_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE ai_chat_messages ENABLE ROW LEVEL SECURITY;

-- RLS Policies for ai_trip_plans

-- Users can view their own trip plans
CREATE POLICY "Users can view own trip plans"
  ON ai_trip_plans
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

-- Users can create their own trip plans
CREATE POLICY "Users can create own trip plans"
  ON ai_trip_plans
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

-- Users can update their own trip plans
CREATE POLICY "Users can update own trip plans"
  ON ai_trip_plans
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- Users can delete their own trip plans
CREATE POLICY "Users can delete own trip plans"
  ON ai_trip_plans
  FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- RLS Policies for ai_chat_messages

-- Users can view their own chat messages
CREATE POLICY "Users can view own chat messages"
  ON ai_chat_messages
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

-- Users can create their own chat messages
CREATE POLICY "Users can create own chat messages"
  ON ai_chat_messages
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

-- Users can delete their own chat messages
CREATE POLICY "Users can delete own chat messages"
  ON ai_chat_messages
  FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_ai_trip_plans_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger to automatically update updated_at
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'update_ai_trip_plans_updated_at_trigger'
  ) THEN
    CREATE TRIGGER update_ai_trip_plans_updated_at_trigger
      BEFORE UPDATE ON ai_trip_plans
      FOR EACH ROW
      EXECUTE FUNCTION update_ai_trip_plans_updated_at();
  END IF;
END $$;
